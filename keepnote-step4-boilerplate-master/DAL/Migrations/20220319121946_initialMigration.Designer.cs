// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(KeepDbContext))]
    [Migration("20220319121946_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryCreatedBy");

                    b.Property<DateTime>("CategoryCreationDate");

                    b.Property<string>("CategoryDescription");

                    b.Property<string>("CategoryName");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("UsersUserId");

                    b.HasKey("CategoryId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("NoteContent");

                    b.Property<string>("NoteStatus");

                    b.Property<string>("NoteTitle");

                    b.Property<int>("ReminderId");

                    b.Property<string>("UserId");

                    b.HasKey("NoteId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("ReminderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("ReminderCreatedBy");

                    b.Property<string>("ReminderDescription");

                    b.Property<string>("ReminderName");

                    b.Property<string>("ReminderType");

                    b.HasKey("ReminderId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.HasOne("Entities.User", "Users")
                        .WithMany()
                        .HasForeignKey("UsersUserId");
                });

            modelBuilder.Entity("Entities.Note", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithOne("Notes")
                        .HasForeignKey("Entities.Note", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Reminder", "Reminder")
                        .WithOne("Notes")
                        .HasForeignKey("Entities.Note", "ReminderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
